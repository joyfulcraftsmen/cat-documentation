var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/help/installation/",title:"Installation",description:"details how to install cat, all technical stuff (not tutorial)",content:`details how to install cat, all technical stuff (not tutorial)
`}),e.add({id:1,href:"/docs/guides/get-started/install-cat/",title:"How to Install CAT",description:`Installation of CAT is super easy and takes a few minutes. If you already have PowerShell 7 installed on your machine, it\u0026rsquo;s about running Install-Module CAT, that will take you a few seconds.
Prerequisites #`,content:`Installation of CAT is super easy and takes a few minutes. If you already have PowerShell 7 installed on your machine, it\u0026rsquo;s about running Install-Module CAT, that will take you a few seconds.
Prerequisites #`}),e.add({id:2,href:"/docs/release-notes/recent/",title:"Recent releases",description:"",content:""}),e.add({id:3,href:"/docs/guides/",title:"Tutorials",description:"",content:""}),e.add({id:4,href:"/docs/help/project-files/",title:"Project Files",description:"",content:""}),e.add({id:5,href:"/docs/guides/get-started/first-test/",title:"Create Your First Test",description:"",content:""}),e.add({id:6,href:"/docs/release-notes/archive/",title:"Archive",description:"",content:""}),e.add({id:7,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:8,href:"/docs/release-notes/",title:"Release notes",description:"",content:""}),e.add({id:9,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:`💡 Learn more about semantic versioning and advanced range syntax. Check for outdated packages #The npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:
npm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...] Update packages #The npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:
npm update [\u0026lt;pkg\u0026gt;...] `}),e.add({id:10,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:`Problems updating npm packages #Delete the ./node_modules folder, and run again:
npm install Problems with cache #Delete the temporary directories:
npm run clean `}),e.add({id:11,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`Hyas? #Doks is a Hyas theme build by the creator of Hyas.
Footer notice? #Please keep it in place.
Keyboard shortcuts for search? #focus: Ctrl + / select: ↓ and ↑ open: Enter close: Esc Other documentation? #Netlify Hugo Can I get support? #Create a topic:
Netlify Community Hugo Forums Doks Discussions Contact the creator? #Send h-enk a message:
Netlify Community Hugo Forums Doks Discussions `}),e.add({id:12,href:"/docs/references/",title:"References",description:"",content:""}),e.add({id:13,href:"/docs/license/",title:"License",description:`here comes the license agreement
TODO: name it \u0026ldquo;License\u0026rdquo;? or \u0026ldquo;Terms of use\u0026rdquo;? What is difference?`,content:`here comes the license agreement
TODO: name it \u0026ldquo;License\u0026rdquo;? or \u0026ldquo;Terms of use\u0026rdquo;? What is difference?
`}),e.add({id:14,href:"/docs/roadmap/",title:"Roadmap",description:"",content:""}),e.add({id:15,href:"/docs/release-notes/recent/0.7.0/",title:"CAT 0.7.0",description:`Logging #Default logging level was changed Information. CAT is now logging not only to files (by default to Logs directory next to your project file), but also to standard output. That means you will receive lot\u0026rsquo;s of information in the PowerShell window where you are running CAT or in the logs in Azure DevOps pipelines.
As mentioned, you\u0026rsquo;ll now get this behavior by default, so just run:
Invoke-CatProject ./CompareProdAndUat.cat.yaml To get previous behavior, run`,content:`Logging #Default logging level was changed Information. CAT is now logging not only to files (by default to Logs directory next to your project file), but also to standard output. That means you will receive lot\u0026rsquo;s of information in the PowerShell window where you are running CAT or in the logs in Azure DevOps pipelines.
As mentioned, you\u0026rsquo;ll now get this behavior by default, so just run:
Invoke-CatProject ./CompareProdAndUat.cat.yaml To get previous behavior, run
Invoke-CatProject ./CompareProdAndUat.cat.yaml -LoggingLevel None If you want to see what went wrong, including details for all failed tests, run:
Invoke-CatProject ./CompareProdAndUat.cat.yaml -LoggingLevel Error There\u0026rsquo;s also Debug lelvel, but don\u0026rsquo;t use it if not necessary, it producess lots of log messages. Ideally, this should be used on a single failing test only.
Loggin was redesigned significantly, in default level (Information) you now get info about what connections you loaded, how many tests from how many providers were loaded etc. E.g., in expectation SetsMatch, you now get info if an error occurred in first query, in second query, during initiating the query, during reading rows etc.
Telemetry #We need to know if CAT is used and how. Telemetry is one of the ways. We collect basic information about what features of CAT are used.
We do NOT collect things like
data returned by the queries text of queries connection strings names of tests or data sources What we do collect:
some CAT high-level command was invoked (such as open a project, run tests) what types of expectations are used (but no text details about tests) what providers you use (such as SqlServer, Postgres, Dax etc.) how many tests were run, what time they took to run Generally NO data about what you are testing or about your machine. Rather what features of CAT
are being used.
`}),e.add({id:16,href:"/docs/release-notes/recent/0.6.0/",title:"CAT 0.6.0",description:`Output test results in MS Excel #Remember you have more options for storing results of tests?
Output: trx, yaml, json Now, there is one more - the always requested .xlsx format:
Output: xlsx Use trx for Azure DevOps, json for further automation, xlsx for your users :)
The output defaults to TestResults directory with a timestamp in a file name. But if you need more control, you can do the same tricks as with all other formats:`,content:`Output test results in MS Excel #Remember you have more options for storing results of tests?
Output: trx, yaml, json Now, there is one more - the always requested .xlsx format:
Output: xlsx Use trx for Azure DevOps, json for further automation, xlsx for your users :)
The output defaults to TestResults directory with a timestamp in a file name. But if you need more control, you can do the same tricks as with all other formats:
Output: - Format: trx Path: LatestResults.trx - Format: json Path: result-{timestamp}.json The first example always rewrites the LatestResults.trx file with current content. The other creates a result\u0026hellip;.json file in the projects directory (not in TestResults directory as in default configuration). Boht absolute and relative paths work, relative paths resolve against the folder where you have your *.cat.yaml project file.
`}),e.add({id:17,href:"/docs/release-notes/recent/0.5.0/",title:"CAT 0.5.0",description:`Create a new project more easily #In PowerShell module, there is a new command: New-CatProject. You can use it like this:
cd D:\\Testing\\MyProjectName New-CatProject MyProjectName It will create a new file in your current directory (so navigate using cd ... first): MyProjectName.cat.yaml - an almost empty project file with one data source and one test.
In future we consider adding more switches, such as where to store data sources, where to store tests etc.`,content:`Create a new project more easily #In PowerShell module, there is a new command: New-CatProject. You can use it like this:
cd D:\\Testing\\MyProjectName New-CatProject MyProjectName It will create a new file in your current directory (so navigate using cd ... first): MyProjectName.cat.yaml - an almost empty project file with one data source and one test.
In future we consider adding more switches, such as where to store data sources, where to store tests etc. Or may be even an interactive mode :)
Limits introduced #Because this is still pre-release, date limit (will work until 2023-04-30) and limit for number of tests executed at one time were introduced.
When exceeded, the test will have Inconclusive result and the message will clearly state what\u0026rsquo;s wrong.
`}),e.add({id:18,href:"/docs/release-notes/archive/0.4.0/",title:"CAT 0.4.0",description:`Install CAT from JC private PowerShell feed #Installation is now much easier and can be done even from Azure DevOps Microsoft hosted agent.
First, you\u0026rsquo;ll need to generate a personal access token. Go to dev.azure.com and generate one:
Then, click on \u0026ldquo;+ New Token\u0026rdquo; and fill in these values:
Now you can run this script to get CAT. When you are prompted for credentials, fill in your email as user name and the PAT token as password - !`,content:"Install CAT from JC private PowerShell feed #\rInstallation is now much easier and can be done even from Azure DevOps Microsoft hosted agent.\nFirst, you\u0026rsquo;ll need to generate a personal access token. Go to dev.azure.com and generate one:\nThen, click on \u0026ldquo;+ New Token\u0026rdquo; and fill in these values:\nNow you can run this script to get CAT. When you are prompted for credentials, fill in your email as user name and the PAT token as password - !! not your domain password !!).\n$credential = Get-Credential $feedUrl = \u0026quot;https://pkgs.dev.azure.com/joyfulcraftsmen/Products/_packaging/CAT/nuget/v2\u0026quot; Register-PSRepository -Name JoyfulDevOps -SourceLocation $feedUrl -PublishLocation $feedUrl -InstallationPolicy Trusted -Credential $credential Install-Module CAT -Repository JoyfulDevOps -Credential $credential -Force -AcceptLicense In Azure DevOps pipelines, the interactive prompt that asks you for credentails does not make sense. In that case, create the $credential value like this:\n$patToken = \u0026quot;$(PatToken)\u0026quot;; # Get PAT token from Azure DevOps sensitive variable $secure = ConvertTo-SecureString -String $patToken -AsPlainText -Force; $credential = New-Object System.Management.Automation.PSCredential(\u0026quot;your.email@joyfulcraftsmen.com\u0026quot;, $secure); Note that you have to change the email in the example above.\n"}),e.add({id:19,href:"/docs/release-notes/archive/0.3.0/",title:"CAT 0.3.0",description:`PowerShell Module #PowerShell module has now more commands.
Get-Command -Module CAT Most important new one is Invoke-CatProject. It is a short hand for
opening the project and loading data sources and tests invoking all tests display nicely formatted summary. PowerShell module now finally displays progress durring the test execution..
So in the basic scenario, when you always need to re-read the .cat.yaml project, run all tests and see formatted results, just use`,content:`PowerShell Module #PowerShell module has now more commands.
Get-Command -Module CAT Most important new one is Invoke-CatProject. It is a short hand for
opening the project and loading data sources and tests invoking all tests display nicely formatted summary. PowerShell module now finally displays progress durring the test execution..
So in the basic scenario, when you always need to re-read the .cat.yaml project, run all tests and see formatted results, just use
Invoke-CatProject ./MyProject.cat.yaml or just without any parameters, if you are in a directory with exactly one project file:
Invoke-CatProject Logging #See documentation here: Logging
`}),e.add({id:20,href:"/docs/release-notes/archive/0.2.0/",title:"CAT 0.2.0",description:`What\u0026rsquo;s new?
Tolerance in Percents #You can now set tolerance in percents and don\u0026rsquo;t care about absolute numbers.
There are two values that are being compared. So, what is the base for calculate the percentage? In CAT it is always the lower of the two numbers. This is probably a minor thing (the values are supposed to be almost the same anyway), but it\u0026rsquo;s good to know about that.`,content:`What\u0026rsquo;s new?
Tolerance in Percents #You can now set tolerance in percents and don\u0026rsquo;t care about absolute numbers.
There are two values that are being compared. So, what is the base for calculate the percentage? In CAT it is always the lower of the two numbers. This is probably a minor thing (the values are supposed to be almost the same anyway), but it\u0026rsquo;s good to know about that.
You provide the value in percents (don\u0026rsquo;t divide by 100 yourself, CAT will do).
Example project that uses tolerance in percents:
Data Sources: - Provider: Yaml@1 Connection string: MyProject.cat.yaml Name: ProjectFile Tests: - Name: Within percent tolerance Order: 1 Description: This should pass, as the difference is within percent tolerance First Data Source: ProjectFile First Query: /Expected Second Data Source: ProjectFile Second Query: /Actual Expectation: SetsMatch Tolerance: 1.5 # this means 1.5 % (so it is exactly 1.5 when the base is 100) Tolerance mode: percent - Name: Outside percent tolerance Order: 2 Description: This should fail, as the difference is within outside defined tolerance First Data Source: ProjectFile First Query: /Expected Second Data Source: ProjectFile Second Query: /Actual Expectation: SetsMatch Tolerance: 0.0001 Tolerance mode: percent - Name: Tolerance in percent the same as difference Order: 3 Description: This should pass, as the difference is the same as defined percent tolerance First Data Source: ProjectFile First Query: /Expected Second Data Source: ProjectFile Second Query: /Actual Expectation: SetsMatch Tolerance: 1 # difference is 10, which is exactly one percent of the lower value Tolerance mode: percent Expected: - Year: 2021 Profit: 1000 # ten less than in the second set - Year: 2022 Profit: 1500 Actual: - Year: 2021 Profit: 1010 # ten more than in the first set - Year: 2022 Profit: 1500 TRX Output Fixed #The TRX file output (see release notes for 0.1.0) was not recognized correctly in Azure DevOps. Now it is formatted correctly and you can see nice charts after publishing test results in Azure DevOps pipeline (tested).
Timeouts #Timeouts were missing in CAT completely. Now you can use them again. Compared to JC.Unit, they will now work with any test and any provider, even those that do not use relational databases.
Thats\u0026rsquo; all for now, stay tuned ;)
`}),e.add({id:21,href:"/docs/release-notes/archive/0.1.0/",title:"CAT 0.1.0",description:`Things changed a bit, read carefully please\u0026hellip;
❗❗ The current version is unfortunatelly compatible only with PowerShell 7 (will be addressed). Please try out CAT on PowerShell 7.Versioning #Why has this version number 0.1.0? We use Semantic versioning - and in this release there is new functionality (basic output handling, such as renaming TRX files).
Things are renamed #What got renamed? Basically everything:
JC.Unit CAT Connection / Source Data Source Connection Type Provider TestDescription Description TestQuerySource First Data Source (or just Data Source) TestQuery First Query (or just Query) ReferenceQuerySource Second Data Source ReferenceQuery Second Query TestTyppe Expectation ZeroRows SetIsEmpty SameData SetsMatch RowCount SetRowCount For naming of tests you can use either:`,content:`Things changed a bit, read carefully please\u0026hellip;
❗❗ The current version is unfortunatelly compatible only with PowerShell 7 (will be addressed). Please try out CAT on PowerShell 7.Versioning #Why has this version number 0.1.0? We use Semantic versioning - and in this release there is new functionality (basic output handling, such as renaming TRX files).
Things are renamed #What got renamed? Basically everything:
JC.Unit CAT Connection / Source Data Source Connection Type Provider TestDescription Description TestQuerySource First Data Source (or just Data Source) TestQuery First Query (or just Query) ReferenceQuerySource Second Data Source ReferenceQuery Second Query TestTyppe Expectation ZeroRows SetIsEmpty SameData SetsMatch RowCount SetRowCount For naming of tests you can use either:
TestSuite, Order, TestCase, TestName or just Suite, Order TestCase, Name If a name is composed of more words (such as First Query), all these forms are allowed:
FirstQuery First_Query First Query (with underscore, space, or without anything)
Example of a Project File with New Naming Conventions #Data Sources: - Name: YamlData Provider: Yaml@1 Connection String: ./Employees.yaml - Name: CsvData Provider: Csv@1 ConnectionString: . # current folder, where this project file is - Name: CsvOleDBData Provider: CsvOleDB@1 # this allows more advanced SQL (but requires driver) ConnectionString: . ExtendedProperties: Text;HDR=YES;FMT=Delimited;characterset=65001; Tests: - Name: Both files contain the same data Order: 1 Description: This should pass, the data are the same First Data Source: YamlData First Query: /Employees Second Data Source: CsvData Second Query: SELECT * FROM Employees.csv Expectation: SetsMatch - Name: Different data Order: 2 Description: This should fail, we changed order in the second set (order matters!) First Data Source: YamlData First Query: /Employees Second Data Source: CsvOleDBData Second Query: SELECT * FROM Employees.csv ORDER BY ID DESC Expectation: SetsMatch - Name: More rows in first set Order: 3 Description: This should fail, we have only one row in the second set (the first row is the same in both) First Data Source: YamlData First Query: /Employees Second Data Source: CsvOleDBData Second Query: SELECT * FROM Employees.csv WHERE ID = 1 Expectation: SetsMatch - Name: More rows in second set Order: 4 Description: This should fail, we have only two rows in the first set, in the second set 4 (they are duplicated using union all) First Data Source: YamlData First Query: /Employees Second Data Source: CsvOleDBData Second Query: SELECT * FROM Employees.csv UNION ALL SELECT * FROM Employees.csv Expectation: SetsMatch For more examples, see the Pester tests (ask for read access if you don\u0026rsquo;t have it). It is full of examples how to use the project files.
Compatibility with JC.Unit #The naming conventions from JC.Unit are not supported, but here is a query that helps you at least with the assets defined in the database:
-- for data sources SELECT cd.ConnectionName as Name, cd.ConnectionType + '@1' as Provider, cd.ConnectionString FROM Test.ConnectionDefinition as cd -- for tests SELECT t.TestSuite, t.[Order], t.TestCase, t.TestName, t.TestDescription AS [Description], t.TestQuerySource AS [FirstDataSource], t.TestQuery AS [FirstQuery], t.ReferenceQuerySource AS [SecondDataSource], t.ReferenceQuery AS [SecondQuery], CASE t.TestTypeName WHEN 'SameData' THEN 'SetsMatch' WHEN 'ZeroRows' THEN 'SetIsEmpty' WHEN 'Rowcount' THEN 'SetRowCount' ELSE t.TestTypeName END AS [Expectation], t.Categories, t.Tolerance, t.Timeout FROM Test.TestDefinition AS t; Default Location for Data Sources and Tests is the Project File #From this version onwards, you don\u0026rsquo;t have to specify where your data sources and test are - by default, they are expected in the project file. So in the project file (e.g., BigBang.cat.yaml), just provide them:
Data Sources: - ..... - ..... Tests: - ..... - ..... - ..... See the example above.
If your tests or data sources are elswhere (not in the project file), you can specify where they are like this:
Get list of data sources from: - Provider: SqlServer@1 Connection string: data source=localhost;integrated security=true;initial catalog=BigBang; Query: SELECT * FROM Tests.ConnectionDefinition Get list of tests from: - Provider: SqlServer@1 Connection string: data source=localhost;integrated security=true;initial catalog=BigBang; Query: SELECT * FROM Tests.TestDefinition And that\u0026rsquo;s it. Similarly for Excel, ORACLE, YAML file (if you have tests in a separate file), or any other provider. For databases, the query can be a stored procedure, e.g. Query: EXEC Tests.GetSmokeTests @UseFilter=0;
Handling Output #This is still experimental feature, but already works. So far only TRX, YAML and JSON formats of output are supported. TRX (not yet tested) complies with the format expected by Azure DevOps, but contains less information. YAML and JSON contain all information about the test (complete test definition, all information about the exectuion, detailed exception).
In the project file, just use:
Output: trx You can ask for more types of output:
Output: trx, yaml, json It will generate the file in the TestResults folder next to your project file.
If you need more control on where the file is and how it is named, use this syntax:
Output: - Format: trx Path: LatestResults.trx - Format: json Path: result-{timestamp}.json The {timestamp} will be replaced with current date/time that corresponds to the end of the tests execution (basically the point in time when the last test was executed, that means before the output is processed).
CAT testing #Last but not least, progress was made with unit testing and integration testing of the CAT solution - at least it started :)
Limitations #Still no GUI Still no DevOps extension (comming soon) Works with PowerShell 7 only (will be addressed) Still may be buggy (but CAT will be soon covered with lots of automated tests) `}),e.add({id:22,href:"/docs/release-notes/archive/0.0.2/",title:"CAT 0.0.2",description:`Compared to CAT 0.0.1, this version contains only one fix:
The installer now works with both PowerShell 5 and newer versions of PowerShell. (#16002) `,content:`Compared to CAT 0.0.1, this version contains only one fix:
The installer now works with both PowerShell 5 and newer versions of PowerShell. (#16002) `}),e.add({id:23,href:"/docs/release-notes/archive/0.0.1/",title:"CAT 0.0.1",description:`Welcome to the very first version of CAT - CAT 0.0.1!
❗❗ This is not a production ready release. Might not yet be as stable as it\u0026rsquo;s predecessor (JC.Unit), but it brings lots of new stuff ;-) So, what\u0026rsquo;s new?
Versioning #ALL components of CAT will be versioned and released together:
core functionality PowerShell module GUI (CAT runner) - not yet in this version DevOps task - not yet in this version documentation \u0026hellip; All will be found on one place (TODO, where), with version specified.`,content:`Welcome to the very first version of CAT - CAT 0.0.1!
❗❗ This is not a production ready release. Might not yet be as stable as it\u0026rsquo;s predecessor (JC.Unit), but it brings lots of new stuff ;-) So, what\u0026rsquo;s new?
Versioning #ALL components of CAT will be versioned and released together:
core functionality PowerShell module GUI (CAT runner) - not yet in this version DevOps task - not yet in this version documentation \u0026hellip; All will be found on one place (TODO, where), with version specified.
Project Files #Remember JC.Unit.json file?
Uggly, right? You cannot specify more sources of tests, configuration is not extendable, \u0026hellip;
Welcome to project files:
Note that now you can specify more sources of connections, but what\u0026rsquo;s more important, more sources of tests. It gives you a freedom - organize your tests in one or more YAML files next to your project file, have MS Excel file(s) with tests, get tests from a database - all of this nicely coupled together, defined on one place - in your project file.
The project file must have a file extension .cat.yaml.
CAT does NOT understand files with other extensions.
The documentation is not yet ready. Try to mimic what you see in the example on the picture. Contact the development team if needed.
Please see \u0026ldquo;Migration from JC.Unit\u0026rdquo; section for instructions how to migrate JC.Unit.json to the new format.
Readers #TODO
PowerShell Module #TODO
Migration from JC.Unit #TODO
❗❗ This is not a production ready release. Don\u0026rsquo;t migrate the real code. Test it \u0026ldquo;outside\u0026rdquo;.`}),e.add({id:24,href:"/docs/guides/get-started/",title:"Get Started",description:"",content:""}),e.add({id:25,href:"/docs/",title:"Docs",description:"Docs Doks.",content:`docs xxxxxxx
`}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()